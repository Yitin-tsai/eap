plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.springframework.cloud.contract' version '4.3.0'
}

group = 'com.eap'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', '2023.0.3')
    set('testcontainersVersion', '1.19.8')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'

    testCompileOnly 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:rabbitmq'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'

    contractTestImplementation 'org.springframework.boot:spring-boot-starter-test'
}

sourceSets {
    contractTest {
        java {
            srcDirs = ['src/contractTest/java']
        }
        resources {
            srcDirs = ['src/contractTest/resources']
        }
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += output + compileClasspath
    }
}

configurations {
    contractTestImplementation.extendsFrom testImplementation
    contractTestRuntimeOnly.extendsFrom testRuntimeOnly
}

contracts {
    contractsDslDir = file("src/test/resources/contracts")
    includedFiles = [".*"] 
    baseClassForTests = "com.eap.eap_matchengine.BaseContractTest"
    packageWithBaseClasses = "com.eap.eap_matchengine"
    testFramework = "JUNIT5"
 
}

tasks.named('generateContractTests') {
    outputs.dir("$buildDir/generated-test-sources/contractTest")
}

tasks.named('compileTestJava') {
    dependsOn tasks.named('generateContractTests')
    source += files("$buildDir/generated-test-sources/contractTest/java")
}

tasks.named('test') {
    useJUnitPlatform()
    dependsOn tasks.named('generateContractTests')
}

tasks.named('contractTest') {
    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    shouldRunAfter test
}

